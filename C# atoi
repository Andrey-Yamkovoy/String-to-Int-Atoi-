public class Solution {
    public int MyAtoi(string s) {
    int sign = 1;       
    int startIndex = -1;
    int stopIndex = -1;
    bool nextShouldBeDigit = false;
 
    for (int i = 0; i < s.Length; i++) {
      char ch = s[i];
      if(Char.IsDigit(ch)) {
    	  nextShouldBeDigit = true;
       	  if(startIndex < 0) {
       		  startIndex = i;
       	  }    	  
      }
      else if(nextShouldBeDigit) {
    	  break;
      }     
      else if(ch == '-') {
    	  sign = -1;
    	  nextShouldBeDigit = true;
      }
      else if(ch == '+') {
    	  nextShouldBeDigit = true;
      }
      else if(ch != ' ') {
    	  break;
      }
      stopIndex = i;
    } 

    if (stopIndex >= 0 && startIndex >= 0) {
      int zeroVal = (int)'0';
      long result= 0;
      for (int i = startIndex; i<= stopIndex; i++) { 
        result = (result*10) + ((int)s[i] -zeroVal);
        if (result > Int32.MaxValue) {
        	return sign < 0 
        			? Int32.MinValue 
        			: Int32.MaxValue; 
        }
      }
      return (int)result * sign;
    } 
    return 0;        
    }
}
