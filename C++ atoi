class Solution {
public:
    int myAtoi(string s) {
        int sign = 1;
        int startIndex = -1;
        int stopIndex = -1;
        bool nextShouldBeDigit = false;
        
        for (int i = 0; i < s.length(); i++) {
            char ch = s[i];
            if(isdigit(ch)) {
    	        nextShouldBeDigit = true;
       	        if(startIndex < 0) {
       		        startIndex = i;
       	        }    	  
            }
            else if(nextShouldBeDigit) {
    	        break;
            }     
            else if(ch == '-') {
    	        sign = -1;
    	        nextShouldBeDigit = true;
            }
            else if(ch == '+') {
    	        nextShouldBeDigit = true;
            }
            else if(ch != ' ') {
    	        break;
            }
            stopIndex = i;
        } 
        if (stopIndex >= 0 && startIndex >= 0) {
            int zeroVal = (int)'0';
            long result= 0;
            for (int i = startIndex; i<= stopIndex; i++) { 
                result = (result*10) + ((int)s[i] -zeroVal);
                    if (result > INT_MAX) {
        	            return sign < 0 
        			        ? INT_MIN 
        			        : INT_MAX; 
                    }
            }
            return (int)result * sign;
        } 
    return 0;
    }
};
